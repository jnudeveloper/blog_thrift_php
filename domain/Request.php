<?php
namespace thriftgen\domain;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Request {
  static $_TSPEC;

  /**
   * @var int
   */
  public $clientIp = null;
  /**
   * @var int
   */
  public $appId = null;
  /**
   * @var string
   */
  public $appKey = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $requestTime = null;
  /**
   * @var string
   */
  public $data = null;
  /**
   * @var string
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'clientIp',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'appKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'requestTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['clientIp'])) {
        $this->clientIp = $vals['clientIp'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['appKey'])) {
        $this->appKey = $vals['appKey'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['requestTime'])) {
        $this->requestTime = $vals['requestTime'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'Request';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->clientIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->requestTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Request');
    if ($this->clientIp !== null) {
      $xfer += $output->writeFieldBegin('clientIp', TType::I64, 1);
      $xfer += $output->writeI64($this->clientIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 2);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appKey !== null) {
      $xfer += $output->writeFieldBegin('appKey', TType::STRING, 3);
      $xfer += $output->writeString($this->appKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestTime !== null) {
      $xfer += $output->writeFieldBegin('requestTime', TType::I64, 5);
      $xfer += $output->writeI64($this->requestTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 6);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 7);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

