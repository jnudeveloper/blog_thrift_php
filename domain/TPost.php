<?php
namespace thriftgen\domain;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class TPost {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $summary = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var int
   */
  public $updateTime = null;
  /**
   * @var int
   */
  public $authorId = null;
  /**
   * @var int
   */
  public $approveNum = null;
  /**
   * @var int
   */
  public $collectNum = null;
  /**
   * @var int
   */
  public $commentNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'summary',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'createTime',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'updateTime',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'authorId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'approveNum',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'collectNum',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'commentNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['summary'])) {
        $this->summary = $vals['summary'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['authorId'])) {
        $this->authorId = $vals['authorId'];
      }
      if (isset($vals['approveNum'])) {
        $this->approveNum = $vals['approveNum'];
      }
      if (isset($vals['collectNum'])) {
        $this->collectNum = $vals['collectNum'];
      }
      if (isset($vals['commentNum'])) {
        $this->commentNum = $vals['commentNum'];
      }
    }
  }

  public function getName() {
    return 'TPost';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->summary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->authorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->approveNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->collectNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commentNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TPost');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->summary !== null) {
      $xfer += $output->writeFieldBegin('summary', TType::STRING, 3);
      $xfer += $output->writeString($this->summary);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I32, 6);
      $xfer += $output->writeI32($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I32, 7);
      $xfer += $output->writeI32($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorId !== null) {
      $xfer += $output->writeFieldBegin('authorId', TType::I32, 8);
      $xfer += $output->writeI32($this->authorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->approveNum !== null) {
      $xfer += $output->writeFieldBegin('approveNum', TType::I32, 9);
      $xfer += $output->writeI32($this->approveNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->collectNum !== null) {
      $xfer += $output->writeFieldBegin('collectNum', TType::I32, 10);
      $xfer += $output->writeI32($this->collectNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentNum !== null) {
      $xfer += $output->writeFieldBegin('commentNum', TType::I32, 11);
      $xfer += $output->writeI32($this->commentNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

