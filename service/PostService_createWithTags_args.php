<?php
namespace thriftgen\service;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class PostService_createWithTags_args {
  static $_TSPEC;

  /**
   * @var \thriftgen\domain\TPost
   */
  public $post = null;
  /**
   * @var \thriftgen\domain\TTag[]
   */
  public $tagList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'post',
          'type' => TType::STRUCT,
          'class' => '\thriftgen\domain\TPost',
          ),
        2 => array(
          'var' => 'tagList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thriftgen\domain\TTag',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['post'])) {
        $this->post = $vals['post'];
      }
      if (isset($vals['tagList'])) {
        $this->tagList = $vals['tagList'];
      }
    }
  }

  public function getName() {
    return 'PostService_createWithTags_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->post = new \thriftgen\domain\TPost();
            $xfer += $this->post->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->tagList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \thriftgen\domain\TTag();
              $xfer += $elem12->read($input);
              $this->tagList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PostService_createWithTags_args');
    if ($this->post !== null) {
      if (!is_object($this->post)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('post', TType::STRUCT, 1);
      $xfer += $this->post->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagList !== null) {
      if (!is_array($this->tagList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tagList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tagList));
        {
          foreach ($this->tagList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

